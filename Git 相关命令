Git 相关命令
添加文件夹
git add .
查看日志
git log
查看状态
git status

提交
git commit -m "complete homework basic founction used react"
推送
git push
拉取
git pull

git 目录说明
$>tree -L 1
.
|-- HEAD         # 这个git项目当前处在哪个分支里
|-- config       # 项目的配置信息，git config命令会改动它
|-- description  # 项目的描述信息
|-- hooks/       # 系统默认钩子脚本目录
|-- index        # 索引文件
|-- logs/        # 各个refs的历史信息
|-- objects/     # Git本地仓库的所有对象 (commits, trees, blobs, tags)
`-- refs/        # 标识你项目里的每个分支指向了哪个提交(commit)。

 git status 命令是查看索引内容

获得一个Git仓库
*  git clone http://www.kernel.org/pub/scm/git/git.git  （获得已有仓库）
* git init  (初始化一个新的仓库)
修改文件，将它们更新的内容添加到索引中.
* git add file1 file2 file3
 git diff 命令再加上 --cached 参数 ,看看哪些文件将被提交(commit)
* git diff --cached (如果没有--cached参数，git diff 会显示当前你所有已做的但没有加入到索引里的修改.) 你也可以用git status命令来获得当前项目的一个状况:
提交
* git commit
* git commit -a  （加了-a，在 commit 的时候，能帮你省一步 git add ，但也只是对修改和删除文件有效， 新文件还是要 git add，不然就是 untracked 状态）
分支与合并
* git branch experimental （创建一个分支： ”experimental”）
* git branch （当前仓库中存在的所有分支列表， 星号(“*”)标识了你当工作在哪个分支下）
* git checkout experimental   （切换到”experimental”分支）
* git merge experimental  （合并“experimental”和“master”两个分支，没有冲突(conflict), 那么合并就完成了）
* git diff （查看当前有哪些文件产生了冲突）
* git commit -a  （解决冲突后提交）
* gitk  （查看commit的结果，你会看到它有两个父分支：一个指向当前 的分支，另外一个指向刚才合并进来的分支）
* git merge next   （查看commit的结果，在有问题的文件上会有冲突标记，用git commit命令来提交）
* git branch -d experimental   （git branch -d只能删除那些已经被当前分支的合并的分支）
* git branch -D crazy-idea   （如果你要强制删除某个分支的话就用git branch –D；强制删除一个叫“crazy-idea”的分支）
撤销合并
* git reset --hard HEAD  （把当前的修改都放弃，可以用此命令回到合并之前的状态）
* git reset --hard ORIG_HEAD（你已经把合并后的代码提交，但还是想把它们撒销）
快速向前合并
* 如果当前的分支和另一个分支没有内容上的差异，就是说当前分支的每一个提交(commit)都已经存在另一个分支里了，git 就会执行一个“快速向前"(fast forward)操作；git 不创建任何新的提交(commit),只是将当前分支指向合并进来的分支。
查看历史 －Git日志
* git log     (命令可以显示所有的提交(commit)
* git log v2.5.. Makefile fs/      (找出所有从"v2.5“开 始在fs目录下的所有Makefile的修改)
* git log -p    (显示补丁(patchs))
日志统计
* git log --stat    (显示在每个提交(commit)中哪些文件被修改了, 这些文件分别添加或删除了多少行内容)
格式化日志
* git log --pretty=oneline  
* git log --pretty=short   (‘--pretty'参数可以使用若干表现格式，如‘oneline’ , ‘short’ , ‘medium','full','fuller','email' 或‘raw’, 也可以用‘--pretty=format'参数来创建你自己的"格式“)
日志排序
* git log --pretty=format:'%h : %s' --topo-order --graph   (提交(commits)按拓朴顺序来显示(就是子提交在它们的父提交前显示)
* git log --pretty=format:'%h : %s' --date-order --graph    (这样显示提交日志的顺序主要按提交日期来排序)
比较提交 - Git Diff  
* git diff master..test     (只显示两个分支间的差异)
* git diff master...test    (找出‘master’,‘test’的共有 父分支和'test'分支之间的差异，用3个‘.'来取代前面的两个'.' )
* git diff       (git diff可以找出你项目上任意两点间 的改动，或是用来查看别人提交进来的新分支, 没有 staged(添加到索引中)，且在下次提交时 不会被提交的修改)
* git diff --cached   (显示你当前的索引和上次提交间的差异；这些内容在不带"-a"参数运行 "git commit"命令时就会被提交)
* git diff HEAD   (显示你工作目录与上次提交时之间的所有差别，这条命令所显示的 内容都会在执行"git commit -a"命令时被提交)
* git diff test   （查看当前的工作目录与另外一个分支的差别）
* git diff HEAD -- ./lib    （显示你当前工作目录下的lib目录与上次提交之间的差别）
Git标签
* git tag stable-1 1b2e1d63ff   （用stable-1 作为提交(commit) "1b2e1d63ff" 的代称(refer)。前面这样创建的是一个“轻量级标签"，这种分支通常是从来不移动的）
* git tag -a stable-1 1b2e1d63ff   （创建标签对象， 即给标签(tag)添加注释，或是为它添加一个签名(sign it cryptographically)）
签名的标签
* 首先要在 .git/config 或 ~.gitconfig里配好key
* git config (--global) user.signingkey <gpg-key-id>   （配置GPG key）
* git tag -s stable-1 1b2e1d63ff    （有GPG key，可以直接用"-s" 参数来创“签名的标签”）
* git tag -u <gpg-key-id> stable-1 1b2e1d63ff   （没有在配置文件中配GPG key,可以用"-u“ 参数直接指定）
忽略某些文件
* 顶层工作目录中添加一个叫".gitignore"的文件
* # 以'#' 开始的行，被视为注释.
* # 忽略掉所有文件名是 foo.txt 的文件.
* foo.txt
* # 忽略所有生成的 html 文件,
* *.html
* # foo.html是手工维护的，所以例外.
* !foo.html
* #  忽略所有.o 和 .a文件.
* *.[oa]
rebase
* git checkout -b mywork origin     （基于远程分支"origin"，创建一个叫"mywork"的分支）
* git checkout master
* git pull
* git checkout mywork
* git rebase -i HEAD~2  //合并提交 --- 2表示合并两个  将本地的多次提交合并为一个，以简化提交历史，本地有多个提交时,如果不进行这一步,在git rebase master时会多次解决冲突(最坏情况下,每一个提交都会相应解决一个冲突)
* git rebase master 将master最新的分支同步到本地，这个过程可能需要手动解决冲突(如果进行了上一步的话,只用解决一次冲突)
* git rebase master---->解决冲突--->git rebase --continue
* git checkout master     （切换到master分支）
* git merge mywork    （git merge将本地的mywork分支内容合并到master分支）
* git push   （将master分支的提交上传）
* git rebase --abort   （用--abort参数来终止rebase的行动，并且"mywork" 分支会回到rebase开始前的状态。）
Git merge 和 git rebase 的区别
- 相同点 ：
* git rebase 和 git merge 一样都是用于从一个分支获取并且合并到当前分支
- 不同点：
* marge 特点：自动创建一个新的commit
* 如果合并的时候遇到冲突，仅需要修改后重新commit
* 优点：记录了真实的commit情况，包括每个分支的详情
* 缺点：因为每次merge会自动产生一个merge commit，所以在使用一些git 的GUI tools，特别是commit比较频繁时，看到分支很杂乱。
* rebase操作不会生成新的节点，是将两个分支融合成一个线性的操作。
* rebase 特点：会合并之前的commit历史 优点：得到更简洁的项目历史，去掉了merge commit 缺点：如果合并出现代码问题不容易定位，因为re-write了history
储藏
* git stash "work in progress for foo feature"   （保存你的本地修改到储藏(stash)中,然后将你的工作目录和索引里的内容全部重置, 回到你当前所在分支的上次提交时的状态）
* git stash apply  （回复到以前的工作状态）
* git stash list    （用'git stash list'命令可以查看你保存的'储藏'(stashes)）
* 'git stash apply stash@{1}'的命令来使用在队列中的任意一个'储藏'(stashes).
* git stash clear   （用来清空这个队列.）
日期标识符
* master@{yesterday}
* master@{1 month ago}
顺序标识符
* master@{5}    （master前面的第5个提交(ref)）
多个父对象
* master^2    （假设master是由a和b两个分支合并的,那么 master^1 是指分支a, master^2 就是指分支b.）
区间
* 7b593b5..51bea1   （给出在"7b593b5" 和"51bea1"之间除了"7b593b5外"的所有提交(commit)(注意:51bea1是最近的提交).）
* 7b593b..    （包括所有 从 7b593b开始的提交(commit). 译者注: 相当于 7b593b..HEAD）
追踪分支： 
在Git中‘追踪分支’是用与联系本地分支和远程分支的. 如果你在’追踪分支'(Tracking Branches)上执行推送(push)或拉取(pull)时,　它会自动推送(push)或拉取(pull)到关联的远程分支上.
* git branch --track experimental origin/experimental   'git branch'命令时加上'--track'参数, 来手动创建一个'追踪分支'.
* git pull experimental    （它会自动从‘origin'抓取(fetch)内容，再把远程的'origin/experimental'分支合并进(merge)本地的'experimental'分支.）
使用Git Grep进行搜索
* git grep xmmap   （这个仓库里每个使用'xmmap'函数的地方）
* git grep -n xmmap    （显示行号, 你可以添加'-n'选项）
* git grep --name-only xmmap   （只显示文件名, 我们可以使用'--name-only'选项）
* git grep -c xmmap     （可以用'-c'选项,可以查看每个文件里有多少行匹配内容(line matches)）
* git grep xmmap v1.5.0      （如果我们要查找git仓库里某个特定版本里的内容, 我们可以像下面一样在命令行末尾加上标签名(tag reference)）
* git grep -e '#define' --and -e SORT_DIRENT    （查找我们在仓库的哪个地方定义了'SORT_DIRENT'.）
* git grep --all-match -e '#define' -e SORT_DIRENT
* git grep -e '#define' --and \( -e PATH -e MAX \)   （找出名字中含有‘PATH'或是'MAX'的常量定义:）
Git的撤消操作 - 重置, 签出 和 撤消
git reset --hard HEAD     （让工作目录回到上次提交时的状态(last committed state):）
git checkout -- hello.rb    （只是要恢复一个文件,如"hello.rb"）
git revert HEAD    （撤消最近的一个提交）
git revert HEAD^     （撤消“上上次”(next-to-last)的提交）
创建新的空分支
git symbolic-ref HEAD refs/heads/newbranch 
rm .git/index 
git clean -fdx 
<do work> 
git add your files 
git commit -m 'Initial commit'


























